[["index.html", "CHMS data user workshop (non-SASsy version) Preface", " CHMS data user workshop (non-SASsy version) Preface The learning objectives of the CHMS data user workshop are to help participants to: understand where to find and how to navigate sources of information about the CHMS understand what, why and how various aspects of the survey design need to considered and incorporated when analyzing the data and understand best practices when analyzing the data. The workshop encourages participants to get hands-on by providing access to synthetic CHMS SAS data files and code to generate a selection of statistical output. This code - that assumes user proficiency in the selected language - is now available in: SAS SUDAAN STATA (this reads in synthetic STATA data files) R This book presents R code that renders unformatted output that contains the same elements as the SAS HTML output. Workshop team: Tracey Bushnik (HAD), Oleksii Volkov (SSMD) and Angela Walter (CDHM) Note: this version does not contain the elaborate user-defined functions, which render R outputs in a format that approximates SAS HTML outputs. Click here to view that version. "],["import-dependencies.html", "Import dependencies", " Import dependencies # Create a vector of packages to import packages_to_import &lt;- c( &quot;arsenal&quot;, &quot;dplyr&quot;, &quot;ggplot2&quot;, &quot;haven&quot;, &quot;survey&quot;, &quot;srvyr&quot;, &quot;stringr&quot;, &quot;tibble&quot;, &quot;tidyr&quot; ) # Create a vector of all packages that are currently installed installed_packages &lt;- installed.packages()[,&quot;Package&quot;] # Create a vector of any packages to be imported that are not installed uninstalled_packages &lt;- packages_to_import[! packages_to_import %in% installed_packages] # If any packages to import are not installed, install them if(length(uninstalled_packages) &gt; 0) { install.packages(uninstalled_packages) } # Iterate through the vector of packages to import and load them into the Global Environment import_packages &lt;- lapply( X = packages_to_import, FUN = library, character.only = TRUE ) "],["import-data.html", "Import data", " Import data Data files (61MB) # Import SAS data files c2 &lt;- read_sas( data_file = &quot;data/sas data synthetic/cycle2_synthetic.sas7bdat&quot; ) c3clc &lt;- read_sas( data_file = &quot;data/sas data synthetic/cycle3_clc_synthetic.sas7bdat&quot; ) c3el &lt;- read_sas( data_file = &quot;data/sas data synthetic/cycle3_el_synthetic.sas7bdat&quot; ) c3hhd &lt;- read_sas( data_file = &quot;data/sas data synthetic/cycle3_hhd_synthetic.sas7bdat&quot; ) c3fast &lt;- read_sas( data_file = &quot;data/sas data synthetic/cycle3_fasted_synthetic.sas7bdat&quot; ) bswc2 &lt;- read_sas( data_file = &quot;data/sas data synthetic/bootstrap_synthetic_c2.sas7bdat&quot; ) bswc3 &lt;- read_sas( data_file = &quot;data/sas data synthetic/bootstrap_synthetic_c3.sas7bdat&quot; ) bswc2c3 &lt;- read_sas( data_file = &quot;data/sas data synthetic/bootstrap_synthetic_c2_c3.sas7bdat&quot; ) bswc3fast &lt;- read_sas( data_file = &quot;data/sas data synthetic/bootstrap_synthetic_fasted_c3.sas7bdat&quot; ) "],["step-1.html", "Step 1 Step 1a Step 1b", " Step 1 Step 1a Create a dataset that includes all variables from the fasted sub-sample data file, the fasted sub-sample bootstrap weights and also the age, sex and BMI variables from the full sample clinic data file for respondents that were part of the fasted sub-sample. # Perform multiple left joins to merge data from the c3fast, bswc3fast and c3clc data frames fasted &lt;- left_join( x = c3fast, y = bswc3fast %&gt;% select(-WGT_FAST), by = &quot;CLINICID&quot; ) %&gt;% left_join( x = ., y = c3clc %&gt;% select( CLINICID, CLC_SEX, CLC_AGE, HWMDBMIA ), by = &quot;CLINICID&quot; ) Step 1b Create a dataset that includes all variables from the full sample household data file, clinic and environmental lab data files, and the full sample bootstrap weights data file. # Perform multiple left joins to merge data from the c3hhd, c3clc, c3el and bswc3 data frames c3full &lt;- left_join( x = c3hhd, y = c3clc %&gt;% select(-WGT_FULL), by = &quot;CLINICID&quot; ) %&gt;% left_join( x = ., y = c3el %&gt;% select(-WGT_FULL), by = &quot;CLINICID&quot; ) %&gt;% left_join( x = ., y = bswc3 %&gt;% select(-WGT_FULL), by = &quot;CLINICID&quot; ) "],["step-2.html", "Step 2 Full example of imputation and conversion", " Step 2 Create derived variables used in the hands-on examples. # Derive agegrp (age group at clinic visit) c3full &lt;- c3full %&gt;% mutate( agegrp = factor( x = case_when( CLC_AGE &gt;= 3 &amp; CLC_AGE &lt;= 5 ~ 1, CLC_AGE &gt;= 6 &amp; CLC_AGE &lt;= 11 ~ 2, CLC_AGE &gt;= 12 &amp; CLC_AGE &lt;= 19 ~ 3, CLC_AGE &gt;= 20 &amp; CLC_AGE &lt;= 39 ~ 4, CLC_AGE &gt;= 40 &amp; CLC_AGE &lt;= 59 ~ 5, CLC_AGE &gt;= 60 &amp; CLC_AGE &lt;= 79 ~ 6, ), levels = 1:6 ) ) # Derive Hsys c3full &lt;- c3full %&gt;% mutate( Hsys = case_when( BPMDPBPS &gt;= 0 &amp; BPMDPBPS &lt; 140 ~ 2, BPMDPBPS &gt;= 140 &amp; BPMDPBPS &lt; 996 ~ 1, BPMDPBPS &gt;= 996 ~ NA, TRUE ~ 1 # Assign 1 if no other condition met ) ) # Derive Hdias c3full &lt;- c3full %&gt;% mutate( Hdias = case_when( BPMDPBPD &gt;= 0 &amp; BPMDPBPD &lt; 90 ~ 2, BPMDPBPD &gt;= 90 &amp; BPMDPBPD &lt; 996 ~ 1, BPMDPBPD &gt;= 996 ~ NA, TRUE ~ 1 # Assign 1 if no other condition met ) ) # Derive highBP (1 = high blood pressure, 2 = not high blood pressure) c3full &lt;- c3full %&gt;% mutate( highBP = case_when( Hsys == 1 | Hdias == 1 | CCC_32 == 1 ~ 1, is.na(Hsys) &amp; is.na(Hdias) &amp; CCC_32 != 1 ~ NA, TRUE ~ 2 # Assign 2 if no other condition met ) ) # Derive highBPreg c3full &lt;- c3full %&gt;% mutate( highBPreg = factor( x = case_when( highBP == 1 ~ 1, highBP == 2 ~ 0, TRUE ~ NA # Assign NA if no other condition met ), levels = 0:1 ) ) # Derive BMI c3full &lt;- c3full %&gt;% mutate( BMI = case_when( HWMDBMI &gt;= 99.96 ~ NA, TRUE ~ HWMDBMI # Retain BMI value if no other condition met ) ) # Derive BMIcat3 c3full &lt;- c3full %&gt;% mutate( BMIcat3 = factor( x = case_when( CLC_AGE %in% 20:80 &amp; HWMDBMIA %in% 1:2 ~ 1, CLC_AGE %in% 20:80 &amp; HWMDBMIA %in% 3 ~ 2, CLC_AGE %in% 20:80 &amp; HWMDBMIA %in% 4:6 ~ 3, TRUE ~ NA # Assign NA if no other condition met ), levels = 1:3 ) ) # Derive sex c3full$sex &lt;- factor( x = c3full$CLC_SEX, levels = 1:2 ) # Derive age c3full$age &lt;- c3full$CLC_AGE # Derive sleepprob c3full &lt;- c3full %&gt;% mutate( sleepprob = factor( x = case_when( SLP_12 %in% 1:2 ~ 1, SLP_12 %in% 3 ~ 2, SLP_12 %in% 4 ~ 3, SLP_12 %in% 5 ~ 4, TRUE ~ NA # Assign NA if no other condition met ), levels = 1:4 ) ) # Derive sleephrs c3full &lt;- c3full %&gt;% mutate( sleephrs = case_when( SLP_11 &gt;= 99.7 ~ NA, TRUE ~ SLP_11 # Assign SLP_11 value if no other condition met ) ) Full example of imputation and conversion STEP A: Convert all 95s to one half of the LOD values STEP B: Convert the reserve codes equal to valid skip or not stated to blanks STEP C: Convert all values to conventional units STEP D: Get the natural log of the conventional units # Steps A-D # Derive Bmercury, Bmercury_CU and Bmercury_CU_log c3full &lt;- c3full %&gt;% mutate( Bmercury = case_when( LAB_BHG == 999.5 ~ 2.1 / 2, LAB_BHG &gt; 999.5 ~ NA, TRUE ~ LAB_BHG # Assign LAB_BHG value if no other condition met ), Bmercury_CU = Bmercury * 0.2006, Bmercury_CU_log = log(Bmercury_CU) ) "],["step-3.html", "Step 3 Step 3a: estimate proportions Step 3b: testing differences between proportions", " Step 3 Step 3a: estimate proportions Estimate the distribution of sleeping trouble across sex. # Specify the survey design (balanced repeated replication for estimates) survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c( &quot;sex&quot;, &quot;sleepprob&quot; ), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 Data summary # Summarize the survey design summary &lt;- summary(survey_design) # Render number of observations nrow(summary$variables) ## [1] 5800 # Render sum of weights sum(summary$pweights) ## [1] 31410000 Variance estimation # Render method summary$type ## [1] &quot;BRR&quot; # Render number of replicates ncol(summary$repweights) ## [1] 500 Frequency statistics # Render frequency statistics ( stats &lt;- svyby( formula = ~ sleepprob, by = ~ sex, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), method = &quot;logit&quot;, keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ) ## sex sleepprob1 sleepprob2 sleepprob3 sleepprob4 se1 se2 ## 1 1 0.6271837 0.2369708 0.07329223 0.06255326 0.012667811 0.011051780 ## 2 2 0.4775342 0.3247135 0.13939978 0.05835254 0.006162697 0.009746711 ## se3 se4 ci_l.sleepprob1 ci_l.sleepprob2 ci_l.sleepprob3 ## 1 0.003546233 0.004987143 0.6023552 0.2153097 0.06634174 ## 2 0.008008857 0.006676531 0.4654556 0.3056103 0.12370271 ## ci_l.sleepprob4 ci_u.sleepprob1 ci_u.sleepprob2 ci_u.sleepprob3 ## 1 0.05277864 0.6520121 0.2586319 0.08024272 ## 2 0.04526678 0.4896129 0.3438167 0.15509685 ## ci_u.sleepprob4 cv.sleepprob1 cv.sleepprob2 cv.sleepprob3 cv.sleepprob4 ## 1 0.07232788 0.02019793 0.04663772 0.04838485 0.07972634 ## 2 0.07143830 0.01290525 0.03001635 0.05745244 0.11441714 # Export results to a csv file write.csv( x = stats, file = &quot;data/frequency-stats-sleepprob-by-sex.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Tests of association First-order correction # Perform Chi-squared test of association using Chisq statistic svychisq( formula = ~ sleepprob + sex, statistic = &quot;Chisq&quot;, design = survey_design, na.rm = TRUE ) ## ## Pearson&#39;s X^2: Rao &amp; Scott adjustment ## ## data: NextMethod() ## X-squared = 158.62, df = 3, p-value &lt; 2.2e-16 Note: the alternative statistic (Chisq) adjusts the Pearson Chi-squared statistic by a design effect estimate and then compares it to the Chi-squared distribution it would have under simple random sampling. Note: the p-values are computed with a Satterthwaite approximation to the distribution and with denominator degrees of freedom as recommended by Thomas and Rao (1990). Second-order correction # Perform Chi-squared test of association using F statistic svychisq( formula = ~ sleepprob + sex, statistic = &quot;F&quot;, design = survey_design, na.rm = TRUE ) ## ## Pearson&#39;s X^2: Rao &amp; Scott adjustment ## ## data: NextMethod() ## F = 40.762, ndf = 2.3682, ddf = 26.0504, p-value = 2.919e-09 Note: F, the default test option, is the Rao-Scott second-order correction. Step 3b: testing differences between proportions Testing differences in proportions between males and females for each category of sleeping trouble. sleepprob equals 1 # Code sleepprob1 into a dummy variable c3full &lt;- c3full %&gt;% mutate( sleepprob1 = factor( x = case_when( sleepprob == 1 ~ 1, sleepprob != 1 ~ 2 ), levels = 1:2 ) ) # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c(&quot;sex&quot;, &quot;sleepprob1&quot;), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 Data summary # Summarize the survey design summary &lt;- summary(survey_design) # Render number of observations nrow(summary$variables) ## [1] 5800 # Render sum of weights sum(summary$pweights) ## [1] 31410000 Variance estimation # Render method summary$type ## [1] &quot;BRR&quot; # Render number of replicates ncol(summary$repweights) ## [1] 500 Frequency statistics # Render frequency statistics ( stats &lt;- svyby( formula = ~ sleepprob1, by = ~ sex, design = survey_design, FUN = svytotal, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), method = &quot;logit&quot;, keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ) ## sex sleepprob11 sleepprob12 se1 se2 ci_l.sleepprob11 ## 1 1 9715150 5774970 192480.0 201303.14 9337897 ## 2 2 7335144 8025313 120199.6 85633.52 7099557 ## ci_l.sleepprob12 ci_u.sleepprob11 ci_u.sleepprob12 cv.sleepprob11 ## 1 5380423 10092404 6169517 0.01981235 ## 2 7857474 7570731 8193151 0.01638681 ## cv.sleepprob12 ## 1 0.03485787 ## 2 0.01067043 # Export results to a csv file write.csv( x = stats, file = &quot;data/frequency-stats-sleepprob1-by-sex.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Column 1 risks # Render &quot;Row 1&quot; and &quot;Row 2&quot; statistics svyby( formula = ~ sleepprob1, by = ~ sex, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## sex sleepprob11 sleepprob12 se1 se2 ci_l.sleepprob11 ## 1 1 0.6271837 0.3728163 0.012667811 0.012667811 0.6023552 ## 2 2 0.4775342 0.5224658 0.006162697 0.006162697 0.4654556 ## ci_l.sleepprob12 ci_u.sleepprob11 ci_u.sleepprob12 cv.sleepprob11 ## 1 0.3479879 0.6520121 0.3976448 0.02019793 ## 2 0.5103871 0.4896129 0.5345444 0.01290525 ## cv.sleepprob12 ## 1 0.03397869 ## 2 0.01179541 # Render &quot;Total&quot; row statistics svyby( formula = ~ sleepprob1, by = ~ factor(levels(survey_design$variables$sex)[1]), design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## factor(levels(survey_design$variables$sex)[1]) sleepprob11 sleepprob12 ## 1 1 0.5526734 0.4473266 ## se1 se2 ci_l.sleepprob11 ci_l.sleepprob12 ci_u.sleepprob11 ## 1 0.007840376 0.007840376 0.5373066 0.4319597 0.5680403 ## ci_u.sleepprob12 cv.sleepprob11 cv.sleepprob12 ## 1 0.4626934 0.01418627 0.01752719 # Render &quot;Difference (Row 1 - Row 2)&quot; row statistics # Begin by fitting a glm model model &lt;- svyglm( formula = sleepprob1 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), na.action = na.omit ) # Render model summary statistics summary(model) ## ## Call: ## svyglm(formula = sleepprob1 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), ## na.action = na.omit) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.37282 0.01267 29.43 4.79e-11 *** ## sex2 0.14965 0.01198 12.49 2.01e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasibinomial family taken to be 5696.7) ## ## Number of Fisher Scoring iterations: 3 # Render confidence intervals confint(model) ## 2.5 % 97.5 % ## (Intercept) 0.3445907 0.4010420 ## sex2 0.1229473 0.1763516 sleepprob equals 2 # Code sleepprob2 into a dummy variable c3full &lt;- c3full %&gt;% mutate( sleepprob2 = factor( x = case_when( sleepprob == 2 ~ 1, sleepprob != 2 ~ 2 ), levels = 1:2 ) ) # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c(&quot;sex&quot;, &quot;sleepprob2&quot;), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 Data summary # Summarize the survey design summary &lt;- summary(survey_design) # Render number of observations nrow(summary$variables) ## [1] 5800 # Render sum of weights sum(summary$pweights) ## [1] 31410000 Variance estimation # Render method summary$type ## [1] &quot;BRR&quot; # Render number of replicates ncol(summary$repweights) ## [1] 500 Frequency statistics # Render frequency statistics ( stats &lt;- svyby( formula = ~ sleepprob2, by = ~ sex, design = survey_design, FUN = svytotal, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), method = &quot;logit&quot;, keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ) ## sex sleepprob21 sleepprob22 se1 se2 ci_l.sleepprob21 ## 1 1 3670707 11819413 171728.4 176114.7 3334125 ## 2 2 4987747 10372710 138168.5 186683.4 4716942 ## ci_l.sleepprob22 ci_u.sleepprob21 ci_u.sleepprob22 cv.sleepprob21 ## 1 11474235 4007288 12164592 0.04678346 ## 2 10006817 5258552 10738602 0.02770158 ## cv.sleepprob22 ## 1 0.01490046 ## 2 0.01799756 # Export results to a csv file write.csv( x = stats, file = &quot;data/frequency-stats-sleepprob2-by-sex.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Column 1 risks # Render &quot;Row 1&quot; and &quot;Row 2&quot; statistics svyby( formula = ~ sleepprob2, by = ~ sex, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## sex sleepprob21 sleepprob22 se1 se2 ci_l.sleepprob21 ## 1 1 0.2369708 0.7630292 0.011051780 0.011051780 0.2153097 ## 2 2 0.3247135 0.6752865 0.009746711 0.009746711 0.3056103 ## ci_l.sleepprob22 ci_u.sleepprob21 ci_u.sleepprob22 cv.sleepprob21 ## 1 0.7413681 0.2586319 0.7846903 0.04663772 ## 2 0.6561833 0.3438167 0.6943897 0.03001635 ## cv.sleepprob22 ## 1 0.01448409 ## 2 0.01443344 # Render &quot;Total&quot; row statistics svyby( formula = ~ sleepprob2, by = ~ factor(levels(survey_design$variables$sex)[1]), design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## factor(levels(survey_design$variables$sex)[1]) sleepprob21 sleepprob22 ## 1 1 0.2806578 0.7193422 ## se1 se2 ci_l.sleepprob21 ci_l.sleepprob22 ci_u.sleepprob21 ## 1 0.008426452 0.008426452 0.2641422 0.7028267 0.2971733 ## ci_u.sleepprob22 cv.sleepprob21 cv.sleepprob22 ## 1 0.7358578 0.03002394 0.01171411 # Render &quot;Difference (Row 1 - Row 2)&quot; row statistics # Begin by fitting a glm model model &lt;- svyglm( formula = sleepprob2 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), na.action = na.omit ) # Render model summary statistics summary(model) ## ## Call: ## svyglm(formula = sleepprob2 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), ## na.action = na.omit) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.76303 0.01105 69.041 9.90e-15 *** ## sex2 -0.08774 0.01211 -7.246 2.77e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasibinomial family taken to be 5696.7) ## ## Number of Fisher Scoring iterations: 3 # Render confidence intervals confint(model) ## 2.5 % 97.5 % ## (Intercept) 0.7384043 0.78765406 ## sex2 -0.1147250 -0.06076018 sleepprob equals 3 # Code sleepprob3 into a dummy variable c3full &lt;- c3full %&gt;% mutate( sleepprob3 = factor( x = case_when( sleepprob == 3 ~ 1, sleepprob != 3 ~ 2 ), levels = 1:2 ) ) # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c(&quot;sex&quot;, &quot;sleepprob3&quot;), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 Data summary # Summarize the survey design summary &lt;- summary(survey_design) # Render number of observations nrow(summary$variables) ## [1] 5800 # Render sum of weights sum(summary$pweights) ## [1] 31410000 Variance estimation # Render method summary$type ## [1] &quot;BRR&quot; # Render number of replicates ncol(summary$repweights) ## [1] 500 Frequency statistics # Render frequency statistics ( stats &lt;- svyby( formula = ~ sleepprob3, by = ~ sex, design = survey_design, FUN = svytotal, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), method = &quot;logit&quot;, keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ) ## sex sleepprob31 sleepprob32 se1 se2 ci_l.sleepprob31 ## 1 1 1135305 14354815 56359.5 61418.09 1024843 ## 2 2 2141244 13219212 123572.9 146688.88 1899046 ## ci_l.sleepprob32 ci_u.sleepprob31 ci_u.sleepprob32 cv.sleepprob31 ## 1 14234438 1245768 14475192 0.04964259 ## 2 12931707 2383443 13506717 0.05771081 ## cv.sleepprob32 ## 1 0.004278571 ## 2 0.011096643 # Export results to a csv file write.csv( x = stats, file = &quot;data/frequency-stats-sleepprob3-by-sex.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Column 1 risks # Render &quot;Row 1&quot; and &quot;Row 2&quot; statistics svyby( formula = ~ sleepprob3, by = ~ sex, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## sex sleepprob31 sleepprob32 se1 se2 ci_l.sleepprob31 ## 1 1 0.07329223 0.9267078 0.003546233 0.003546233 0.06634174 ## 2 2 0.13939978 0.8606002 0.008008857 0.008008857 0.12370271 ## ci_l.sleepprob32 ci_u.sleepprob31 ci_u.sleepprob32 cv.sleepprob31 ## 1 0.9197573 0.08024272 0.9336583 0.04838485 ## 2 0.8449032 0.15509685 0.8762973 0.05745244 ## cv.sleepprob32 ## 1 0.003826701 ## 2 0.009306129 # Render &quot;Total&quot; row statistics svyby( formula = ~ sleepprob3, by = ~ factor(levels(survey_design$variables$sex)[1]), design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## factor(levels(survey_design$variables$sex)[1]) sleepprob31 sleepprob32 ## 1 1 0.1062071 0.8937929 ## se1 se2 ci_l.sleepprob31 ci_l.sleepprob32 ci_u.sleepprob31 ## 1 0.004260275 0.004260275 0.09785709 0.8854429 0.1145571 ## ci_u.sleepprob32 cv.sleepprob31 cv.sleepprob32 ## 1 0.9021429 0.04011291 0.004766512 # Render &quot;Difference (Row 1 - Row 2)&quot; row statistics # Begin by fitting a glm model model &lt;- svyglm( formula = sleepprob3 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), na.action = na.omit ) # Render model summary statistics summary(model) ## ## Call: ## svyglm(formula = sleepprob3 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), ## na.action = na.omit) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.926708 0.003546 261.322 &lt; 2e-16 *** ## sex2 -0.066108 0.008879 -7.446 2.2e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasibinomial family taken to be 5696.7) ## ## Number of Fisher Scoring iterations: 3 # Render confidence intervals confint(model) ## 2.5 % 97.5 % ## (Intercept) 0.91880627 0.93460927 ## sex2 -0.08589042 -0.04632468 sleepprob equals 4 # Code sleepprob4 into a dummy variable c3full &lt;- c3full %&gt;% mutate( sleepprob4 = factor( x = case_when( sleepprob == 4 ~ 1, sleepprob != 4 ~ 2 ), levels = 1:2 ) ) # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c(&quot;sex&quot;, &quot;sleepprob4&quot;), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 Data summary # Summarize the survey design summary &lt;- summary(survey_design) # Render number of observations nrow(summary$variables) ## [1] 5800 # Render sum of weights sum(summary$pweights) ## [1] 31410000 Variance estimation # Render method summary$type ## [1] &quot;BRR&quot; # Render number of replicates ncol(summary$repweights) ## [1] 500 Frequency statistics # Render frequency statistics ( stats &lt;- svyby( formula = ~ sleepprob4, by = ~ sex, design = survey_design, FUN = svytotal, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), method = &quot;logit&quot;, keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ) ## sex sleepprob41 sleepprob42 se1 se2 ci_l.sleepprob41 ## 1 1 968957.6 14521163 78248.12 80163.59 815594.1 ## 2 2 896321.6 14464135 104121.12 113715.36 692248.0 ## ci_l.sleepprob42 ci_u.sleepprob41 ci_u.sleepprob42 cv.sleepprob41 ## 1 14364045 1122321 14678280 0.08075495 ## 2 14241257 1100395 14687013 0.11616490 ## cv.sleepprob42 ## 1 0.005520467 ## 2 0.007861885 # Export results to a csv file write.csv( x = stats, file = &quot;data/frequency-stats-sleepprob4-by-sex.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Column 1 risks # Render &quot;Row 1&quot; and &quot;Row 2&quot; statistics svyby( formula = ~ sleepprob4, by = ~ sex, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## sex sleepprob41 sleepprob42 se1 se2 ci_l.sleepprob41 ## 1 1 0.06255326 0.9374467 0.004987143 0.004987143 0.05277864 ## 2 2 0.05835254 0.9416475 0.006676531 0.006676531 0.04526678 ## ci_l.sleepprob42 ci_u.sleepprob41 ci_u.sleepprob42 cv.sleepprob41 ## 1 0.9276721 0.07232788 0.9472214 0.07972634 ## 2 0.9285617 0.07143830 0.9547332 0.11441714 ## cv.sleepprob42 ## 1 0.005319921 ## 2 0.007090266 # Render &quot;Total&quot; row statistics svyby( formula = ~ sleepprob4, by = ~ factor(levels(survey_design$variables$sex)[1]), design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) ## factor(levels(survey_design$variables$sex)[1]) sleepprob41 sleepprob42 ## 1 1 0.06046173 0.9395383 ## se1 se2 ci_l.sleepprob41 ci_l.sleepprob42 ci_u.sleepprob41 ## 1 0.003833458 0.003833458 0.05294829 0.9320248 0.06797517 ## ci_u.sleepprob42 cv.sleepprob41 cv.sleepprob42 ## 1 0.9470517 0.06340306 0.004080151 # Render &quot;Difference (Row 1 - Row 2)&quot; row statistics # Begin by fitting a glm model model &lt;- svyglm( formula = sleepprob4 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), na.action = na.omit ) # Render model summary statistics summary(model) ## ## Call: ## svyglm(formula = sleepprob4 ~ sex, design = survey_design, family = quasibinomial(link = &quot;identity&quot;), ## na.action = na.omit) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.937447 0.004987 187.97 &lt;2e-16 *** ## sex2 0.004201 0.008937 0.47 0.648 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasibinomial family taken to be 5696.7) ## ## Number of Fisher Scoring iterations: 3 # Render confidence intervals confint(model) ## 2.5 % 97.5 % ## (Intercept) 0.92633469 0.94855878 ## sex2 -0.01571294 0.02411439 "],["step-4.html", "Step 4 Step 4a: estimate arithmetic means Step 4b: testing differences between arithmetic means", " Step 4 Step 4a: estimate arithmetic means Estimate the average number of hours spent sleeping across age groups. # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c(&quot;agegrp&quot;, &quot;sleephrs&quot;), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 # Compute survey statistics sleephbyage &lt;- svyby( formula = ~ sleephrs, by = ~ agegrp, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;ci&quot;,&quot;cv&quot;), keep.var = TRUE, keep.names = FALSE, na.rm = TRUE ) # Add a sample size vector sleephbyage &lt;- sleephbyage %&gt;% bind_cols( survey_design$variables %&gt;% na.omit %&gt;% count(agegrp) %&gt;% select(n) ) %&gt;% mutate(n = format(n, big.mark = &quot;,&quot;)) %&gt;% relocate(n, .after = agegrp) # Add other vectors ( sleephbyage &lt;- sleephbyage %&gt;% mutate( Variable = &quot;sleephrs&quot;, Label = &quot;Number of hours of sleep in 24 hr period&quot; ) %&gt;% relocate(Variable, Label, .after = agegrp) ) ## agegrp Variable Label n sleephrs ## 1 1 sleephrs Number of hours of sleep in 24 hr period 574 10.323648 ## 2 2 sleephrs Number of hours of sleep in 24 hr period 1,114 9.611417 ## 3 3 sleephrs Number of hours of sleep in 24 hr period 1,045 8.149032 ## 4 4 sleephrs Number of hours of sleep in 24 hr period 1,012 7.401647 ## 5 5 sleephrs Number of hours of sleep in 24 hr period 1,000 7.517556 ## 6 6 sleephrs Number of hours of sleep in 24 hr period 1,048 7.353248 ## se ci_l ci_u cv.sleephrs ## 1 0.06007711 10.205899 10.441397 0.005819369 ## 2 0.03918407 9.534618 9.688217 0.004076826 ## 3 0.04375122 8.063281 8.234782 0.005368886 ## 4 0.04177437 7.319771 7.483524 0.005643929 ## 5 0.06065103 7.398683 7.636430 0.008067918 ## 6 0.06947881 7.217072 7.489424 0.009448725 # Export results to a csv file write.csv( x = sleephbyage, file = &quot;data/arithmetic-means-sleephrs-by-agegrp.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Step 4b: testing differences between arithmetic means Tests whether the average number of hours spent sleeping by 6- to 11-year-olds is statistically different from that of each of the other age groups. Generalized linear model # Fit a survey-weighted generalized linear model # The svyglm function uses MLE so it doesn&#39;t produce a coefficient of determination as calculated by OLS regression # Add labels to the agegrp factor and re-level survey_design$variables &lt;- survey_design$variables %&gt;% mutate( agegrp = factor( x = agegrp, levels = c(2:1, 3:6), labels = c( &quot;6- to 11-year-olds&quot;, &quot;3- to 5-year-olds&quot;, &quot;12- to 19-year-olds&quot;, &quot;20- to 39-year-olds&quot;, &quot;40- to 59-year-olds&quot;, &quot;60- to 80-year-olds&quot; ) ) ) # Fit model g2vsall &lt;- svyglm( formula = sleephrs ~ agegrp, design = na.omit(survey_design) ) # Render model summary statistics summary(g2vsall) ## ## Call: ## svyglm(formula = sleephrs ~ agegrp, design = na.omit(survey_design)) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 9.61142 0.03918 245.289 3.10e-13 *** ## agegrp3- to 5-year-olds 0.71223 0.07436 9.579 7.40e-05 *** ## agegrp12- to 19-year-olds -1.46239 0.06988 -20.928 7.75e-07 *** ## agegrp20- to 39-year-olds -2.20977 0.04596 -48.079 5.43e-09 *** ## agegrp40- to 59-year-olds -2.09386 0.08120 -25.786 2.24e-07 *** ## agegrp60- to 80-year-olds -2.25817 0.06504 -34.720 3.80e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 12444.87) ## ## Number of Fisher Scoring iterations: 2 Wald test # Render Wald test statistics regTermTest( model = g2vsall, test.terms = ~ agegrp, df = 11 ) ## Wald test for agegrp ## in svyglm(formula = sleephrs ~ agegrp, design = na.omit(survey_design)) ## F = 825.1583 on 5 and 11 df: p= 8.9974e-14 "],["step-5.html", "Step 5 Step 5a: histogram Step 5b: estimate geometric mean and confidence intervals Step 5c: testing differences between geometric means", " Step 5 Step 5a: histogram Produces a weighted histogram of the distribution of total blood mercury concentrations across the population. # Specify survey design survey_design &lt;- c3full %&gt;% mutate( prop_weight = WGT_FULL / sum(WGT_FULL) ) %&gt;% as_survey_rep( variables = Bmercury_CU, weights = prop_weight, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 # Render weighted histogram ggplot( data = survey_design$variables %&gt;% na.omit(), mapping = aes( x = Bmercury_CU ) ) + geom_histogram( aes( y = after_stat(count / sum(count)), ), binwidth = 0.5, fill = &quot;#6F7EB3&quot;, color = &quot;black&quot; ) + scale_x_continuous( breaks = seq(from = 0, to = 20, by = 1) ) + labs( title = &quot;Histogram of blood total mercury concentrations (synthetic data)&quot;, x = &quot;Blood total mercury in ug/L - &lt; LOD has been imputed - conventional units&quot;, y = &quot;Relative weight sum&quot; ) + theme_minimal() Step 5b: estimate geometric mean and confidence intervals Geometric mean # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c( &quot;Bmercury_CU&quot;, &quot;Bmercury_CU_log&quot;, &quot;agegrp&quot; ), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot;, mse = TRUE ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 # Compute survey statistics ( stats &lt;- svymean( x = ~ Bmercury_CU_log, design = survey_design, na.rm = TRUE ) ) ## mean SE ## Bmercury_CU_log 0.46022 0.0254 # Export results to a csv file write.csv( x = stats, file = &quot;data/geometric-mean-Bmercury_CU_log.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Domain analysis # Compute survey statistics ( hgage &lt;- svyby( formula = ~ Bmercury_CU + Bmercury_CU_log, by = ~ agegrp, design = survey_design, FUN = svymean, vartype = c(&quot;se&quot;,&quot;cv&quot;), keep.var = TRUE, na.rm = TRUE ) ) ## agegrp Bmercury_CU Bmercury_CU_log se1 se2 cv.Bmercury_CU ## 1 1 2.415222 0.2603190 0.09773800 0.05278050 0.04046750 ## 2 2 2.624472 0.3743866 0.11770421 0.05095392 0.04484872 ## 3 3 2.405474 0.3038183 0.04339746 0.02463062 0.01804113 ## 4 4 3.492874 0.5301177 0.11875332 0.02360946 0.03399874 ## 5 5 3.379534 0.4662747 0.16987404 0.06289319 0.05026552 ## 6 6 3.394908 0.5017597 0.11806971 0.04798998 0.03477847 ## cv.Bmercury_CU_log ## 1 0.20275312 ## 2 0.13609972 ## 3 0.08107025 ## 4 0.04453627 ## 5 0.13488441 ## 6 0.09564337 # Export results to a csv file write.csv( x = hgage, file = &quot;data/domain-analysis-Bmercury_CU-by-agegrp.csv&quot;, row.names = FALSE, na = &quot;&quot; ) Step 5c: testing differences between geometric means Tests whether the geometric mean concentration of total blood mercury for 3- to 5-year-olds is statistically different from each of the older age groups. Generalized linear model # Re-level the agegrp factor survey_design$variables$agegrp &lt;- relevel( x = survey_design$variables$agegrp, ref = 1 ) # Fit a survey-weighted generalized linear model hgage &lt;- svyglm( formula = Bmercury_CU_log ~ agegrp, design = na.omit(survey_design) %&gt;% na.omit ) # Render model summary summary(hgage) ## ## Call: ## svyglm(formula = Bmercury_CU_log ~ agegrp, design = na.omit(survey_design) %&gt;% ## na.omit) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.26032 0.05278 4.932 0.00262 ** ## agegrp2 0.11407 0.07585 1.504 0.18332 ## agegrp3 0.04350 0.06053 0.719 0.49937 ## agegrp4 0.26980 0.06416 4.205 0.00565 ** ## agegrp5 0.20596 0.08509 2.420 0.05183 . ## agegrp6 0.24144 0.06591 3.663 0.01054 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 9982.204) ## ## Number of Fisher Scoring iterations: 2 Wald test # Render Wald test statistics regTermTest( model = hgage, test.terms = ~ agegrp, df = 11 ) ## Wald test for agegrp ## in svyglm(formula = Bmercury_CU_log ~ agegrp, design = na.omit(survey_design) %&gt;% ## na.omit) ## F = 18.93811 on 5 and 11 df: p= 4.5187e-05 Multiple test correction # False discovery rate, the expected proportion of false discoveries among the rejected hypotheses. # The false discovery rate is a less stringent condition than the family-wise error rate, so these methods are more powerful than the others. # Create a vector of coefficients coefficients &lt;- as_tibble(coef(summary(hgage))) %&gt;% select(`Pr(&gt;|t|)`) %&gt;% unlist # Add names to coefficients names(coefficients) &lt;- names(hgage$coefficients) # Render adjusted p-values p.adjust( p = coefficients[-1], method = &quot;fdr&quot; ) ## agegrp2 agegrp3 agegrp4 agegrp5 agegrp6 ## 0.22915118 0.49936871 0.02635124 0.08638865 0.02635124 "],["step-6-percentiles.html", "Step 6: percentiles", " Step 6: percentiles Estimates the percentile distribution of blood total mercury across age groups. # Compute percentiles lapply( X = levels(survey_design$variables$agegrp), FUN = function(x) { svyquantile( x = ~ Bmercury_CU, design = survey_design %&gt;% filter(agegrp == x), quantiles = c(0.25, 0.5, 0.75, 0.95), interval.type = &quot;quantile&quot;, ties = &quot;rounded&quot;, na.rm = TRUE )[[1]] } ) ## [[1]] ## quantile ci.2.5 ci.97.5 se.97.5 ## 0.25 0.58174 0.4029172 0.7605628 0.08622650 ## 0.5 1.34402 1.2313564 1.4566836 0.05432521 ## 0.75 3.61080 2.8129542 4.4086458 0.38471294 ## 0.95 7.82340 6.8419127 8.8048873 0.47326298 ## ## [[2]] ## quantile ci.2.5 ci.97.5 se.97.5 ## 0.25 0.62186 0.4687786 0.7749414 0.07381426 ## 0.5 1.50450 1.2577478 1.7512522 0.11898134 ## 0.75 4.21260 3.7044435 4.7207565 0.24502779 ## 0.95 8.02400 7.1900921 8.8579079 0.40210169 ## ## [[3]] ## quantile ci.2.5 ci.97.5 se.97.5 ## 0.25 0.64192 0.5694324 0.7144076 0.03495279 ## 0.5 1.34402 1.2253561 1.4626839 0.05721849 ## 0.75 3.81140 3.5463205 4.0764795 0.12781857 ## 0.95 7.42220 7.0355037 7.8088963 0.18646091 ## ## [[4]] ## quantile ci.2.5 ci.97.5 se.97.5 ## 0.25 0.60180 0.4987482 0.7048518 0.04969053 ## 0.5 1.82546 1.6792366 1.9716834 0.07050740 ## 0.75 5.81740 5.1914332 6.4433668 0.30183468 ## 0.95 11.03300 9.5428622 12.5231378 0.71852893 ## ## [[5]] ## quantile ci.2.5 ci.97.5 se.97.5 ## 0.25 0.58174 0.4621897 0.7012903 0.05764589 ## 0.5 1.58474 1.0598072 2.1096728 0.25311714 ## 0.75 5.61680 4.8907307 6.3428693 0.35010304 ## 0.95 11.03300 9.3441476 12.7218524 0.81434706 ## ## [[6]] ## quantile ci.2.5 ci.97.5 se.97.5 ## 0.25 0.62186 0.4629538 0.7807662 0.0766229 ## 0.5 1.86558 1.5270725 2.2040875 0.1632248 ## 0.75 5.61680 4.9994638 6.2341362 0.2976731 ## 0.95 10.23060 9.3024022 11.1587978 0.4475673 "],["step-7.html", "Step 7 Step 7a: logistic regression Step 7b: linear regression", " Step 7 Step 7a: logistic regression Design-based regression inference is estimating a population summary statistic, not a model parameter. Generalizing to other populations relies on assumptions about the stability of the data-generating process. Depending on the application, more assumptions may be required: Out-of-sample prediction requires accurate approximation to conditional distribution of Y|X. For large surveys, bias is likely more important than variance, so ignoring weights is risky. But for smaller surveys, ignoring weights may improve mean squared error noticeably. Response profile # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c( &quot;highBPreg&quot;, &quot;sex&quot;, &quot;age&quot;, &quot;BMIcat3&quot;, &quot;agegrp&quot; ), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot; ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 # Render response profile svytotal( x = ~ highBPreg, design = survey_design, na.rm = TRUE ) ## total SE ## highBPreg0 10492259 289369 ## highBPreg1 18944815 275067 Type 3 analysis of effects # Fit a survey-weighted generalized linear model HBPmodel &lt;- svyglm( formula = highBPreg ~ BMIcat3 + sex + age, design = subset( x = na.omit(survey_design), subset = as.numeric(agegrp) &gt; 3 ), family = quasibinomial ) # Render ANOVA table anova( object = HBPmodel, test = &quot;Chisq&quot;, method = &quot;Wald&quot; ) ## Anova table: (Wald tests) ## svyglm(formula = highBPreg ~ BMIcat3, design = subset(x = na.omit(survey_design), ## subset = as.numeric(agegrp) &gt; 3), family = quasibinomial) ## stats df p ## BMIcat3 67.734 2 &lt; 2.2e-16 *** ## sex 25.158 1 5.283e-07 *** ## age 33.820 1 6.040e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Odds ratio estimates # Render model summary stats summary(HBPmodel) ## ## Call: ## svyglm(formula = highBPreg ~ BMIcat3 + sex + age, design = subset(x = na.omit(survey_design), ## subset = as.numeric(agegrp) &gt; 3), family = quasibinomial) ## ## Survey design: ## subset(x = na.omit(survey_design), subset = as.numeric(agegrp) &gt; ## 3) ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -0.087015 0.171742 -0.507 0.614 ## BMIcat32 -0.067968 0.112007 -0.607 0.546 ## BMIcat33 0.617467 0.106890 5.777 2.65e-07 *** ## sex2 -0.420688 0.084606 -4.972 5.53e-06 *** ## age 0.015791 0.002715 5.816 2.28e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasibinomial family taken to be 2963.957) ## ## Number of Fisher Scoring iterations: 4 Association of predicted probabilities and observed responses # Get model data data &lt;- cbind( HBPmodel$y, HBPmodel$fitted.values ) # Compute concordance values ones &lt;- data[data[, 1] == 1,] zeros &lt;- data[data[, 1] == 0,] events &lt;- dim(ones)[1] nonevents &lt;- dim(zeros)[1] pairs &lt;-events * nonevents n &lt;- events + nonevents m &lt;- min(events, nonevents) cc &lt;- matrix(0, nonevents, events) dc &lt;- matrix(0, nonevents, events) tt &lt;- matrix(0, nonevents, events) for (j in 1:nonevents) { for (i in 1:events) { if (ones[i, 2] &gt; zeros[j, 2]) { cc[j, i]&lt;- 1 } else if (ones[i,2] &lt; zeros[j,2]) { dc[j, i] &lt;- 1 } else if (ones[i, 2] == zeros[j, 2]) { tt[j, i] &lt;- 1 } } } # Render table of concordance values tibble( Statistic = c( &quot;Percent concordant&quot;, &quot;Percent discordant&quot;, &quot;Percent tied&quot;, &quot;Pairs&quot;, &quot;Somers&#39; D&quot;, &quot;Gamma&quot;, &quot;Tau-a&quot;, &quot;c&quot; ), Value = c( (sum(cc) / pairs) * 100, (sum(dc) / pairs) * 100, (sum(tt) / pairs) * 100, pairs, (sum(cc) - sum(dc)) / (sum(cc) + sum(dc) + sum(tt)), (sum(cc) - sum(dc)) / (sum(cc) + sum(dc)), 2 *(sum(cc) - sum(dc)) / (n * n * (m - 1) / m), ((sum(cc) - sum(dc)) / (sum(cc) + sum(dc) + sum(tt)) + 1) / 2 ) ) ## # A tibble: 8 x 2 ## Statistic Value ## &lt;chr&gt; &lt;dbl&gt; ## 1 Percent concordant 62.4 ## 2 Percent discordant 37.4 ## 3 Percent tied 0.260 ## 4 Pairs 1988500 ## 5 Somers&#39; D 0.250 ## 6 Gamma 0.251 ## 7 Tau-a 0.113 ## 8 c 0.625 Step 7b: linear regression Estimated regression coefficients # Make sure it is not an ordered factor or gml() otherwise R will attempt lqc fitting c3full$sleepprob &lt;- factor( x = c3full$sleepprob, levels = 4:1, ordered = FALSE ) c3full$sex &lt;- factor( x = c3full$sex, levels = 2:1, ordered = FALSE ) # Specify survey design survey_design &lt;- c3full %&gt;% as_survey_rep( variables = c( &quot;BMI&quot;, &quot;sex&quot;, &quot;age&quot;, &quot;agegrp&quot;, &quot;sleepprob&quot; ), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot; ) # Set degrees of freedom to 11 (16 sites - 5 Regions) survey_design$degf &lt;- 11 # We are only looking at adults mysubset &lt;- survey_design %&gt;% filter(agegrp %in% 4:6) # We should verify first that BMI is normally distributed. But that is not necessarily true for the synthetic data # Fit a survey-weighted generalized linear model BMImodel &lt;- svyglm( formula = BMI ~ age + sex + sleepprob, design = na.omit(mysubset), family = gaussian ) # Render model summary stats summary(BMImodel) ## ## Call: ## svyglm(formula = BMI ~ age + sex + sleepprob, design = na.omit(mysubset), ## family = gaussian) ## ## Survey design: ## Called via srvyr ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 27.182615 0.528237 51.459 &lt; 2e-16 *** ## age 0.030445 0.008096 3.760 0.000382 *** ## sex1 -0.005933 0.243606 -0.024 0.980648 ## sleepprob3 -0.594359 0.707540 -0.840 0.404169 ## sleepprob2 -0.777656 0.496154 -1.567 0.122202 ## sleepprob1 -0.664865 0.445674 -1.492 0.140900 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 143917.8) ## ## Number of Fisher Scoring iterations: 2 Tests of model effects BMI ~ age + sex + sleepprob # Render Wald test statistics regTermTest( model = BMImodel, test.terms = BMI ~ age + sex + sleepprob, df = 11 ) ## Wald test for age sex sleepprob ## in svyglm(formula = BMI ~ age + sex + sleepprob, design = na.omit(mysubset), ## family = gaussian) ## F = 3.863651 on 5 and 11 df: p= 0.028822 BMI ~ age # Render Wald test statistics regTermTest( model = BMImodel, test.terms = BMI ~ age, df = 11 ) ## Wald test for age ## in svyglm(formula = BMI ~ age + sex + sleepprob, design = na.omit(mysubset), ## family = gaussian) ## F = 14.14093 on 1 and 11 df: p= 0.0031522 BMI ~ sex # Render Wald test statistics regTermTest( model = BMImodel, test.terms = BMI ~ sex, df = 11 ) ## Wald test for sex ## in svyglm(formula = BMI ~ age + sex + sleepprob, design = na.omit(mysubset), ## family = gaussian) ## F = 0.0005932485 on 1 and 11 df: p= 0.981 BMI ~ sleepprob # Render Wald test statistics regTermTest( model = BMImodel, test.terms = BMI ~ sleepprob, df = 11 ) ## Wald test for sleepprob ## in svyglm(formula = BMI ~ age + sex + sleepprob, design = na.omit(mysubset), ## family = gaussian) ## F = 0.8864547 on 3 and 11 df: p= 0.47815 "],["step-8.html", "Step 8 Steps 8a-b: combining cycle 2 and cycle 3 environmental laboratory data Steps 8c-f: stack cycle 2 and cycle 3 datafiles together, add weights Step 8g: compare the cycle 2 and cycle 3 estimates of LAB_BCD Step 8h: change the values of LAB_BCD of 999.9 in cycle 2 and 999.99 in cycle 3 to missing Step 8i: derive necessary variables Step 8j: assess any significant changes between cycles", " Step 8 Steps 8a-b: combining cycle 2 and cycle 3 environmental laboratory data Read in cycle 2 / cycle 3 data # Create a &quot;cycle&quot; variable to indicate that the records belong to cycle 2 # We are keeping CLINICID, cycle (dummy added variable), weight_full, clc_age clc_sex # LAB_BCD SMK_12 # They are in the same order c2$CycleIndicator &lt;- 2 c23 &lt;- tibble( c3hhd$CLINICID, c3clc$CLC_SEX, c3clc$CLC_AGE, c3hhd$SMK_12, c3el$LAB_BCD, c3clc$WGT_FULL ) c23$CycleIndicator &lt;- 3 # Rename columns c23 &lt;- c23 %&gt;% rename( CLINICID = `c3hhd$CLINICID`, CLC_SEX = `c3clc$CLC_SEX`, CLC_AGE = `c3clc$CLC_AGE`, SMK_12 = `c3hhd$SMK_12`, LAB_BCD = `c3el$LAB_BCD`, WGT_FULL = `c3clc$WGT_FULL` ) Steps 8c-f: stack cycle 2 and cycle 3 datafiles together, add weights # Stack data frames c23 &lt;- bind_rows( c2, c23 ) # Merge c23 and bswc2c3 c23 &lt;- left_join( x = c23, y = bswc2c3 %&gt;% select(-WGT_FULL), by = &quot;CLINICID&quot; ) Step 8g: compare the cycle 2 and cycle 3 estimates of LAB_BCD Cycle indicator = 2 # Render an output that approximates SAS&#39;s PROC FREQ arsenal::freqlist( object = table( x = c23 %&gt;% filter(CycleIndicator == 2) %&gt;% select(LAB_BCD) ) ) %&gt;% summary(.) %&gt;% as.data.frame %&gt;% rename( LAB_BCD = 1, Frequency = 2, `Cumulative frequency` = 3, `Cumulative percent` = 5 ) %&gt;% relocate(Percent, .after = Frequency) ## LAB_BCD Frequency Percent Cumulative frequency Cumulative percent ## 1 0.4 45 0.70 45 0.70 ## 2 0.5 128 2.00 173 2.70 ## 3 0.6 139 2.17 312 4.88 ## 4 0.7 143 2.23 455 7.11 ## 5 0.8 102 1.59 557 8.70 ## 6 0.9 112 1.75 669 10.45 ## 7 1 126 1.97 795 12.42 ## 8 1.1 104 1.62 899 14.05 ## 9 1.2 106 1.66 1005 15.70 ## 10 1.3 111 1.73 1116 17.44 ## 11 1.4 117 1.83 1233 19.27 ## 12 1.5 127 1.98 1360 21.25 ## 13 1.6 108 1.69 1468 22.94 ## 14 1.7 129 2.02 1597 24.95 ## 15 1.8 104 1.62 1701 26.58 ## 16 1.9 113 1.77 1814 28.34 ## 17 2 104 1.62 1918 29.97 ## 18 2.1 125 1.95 2043 31.92 ## 19 2.2 64 1.00 2107 32.92 ## 20 2.3 25 0.39 2132 33.31 ## 21 2.4 31 0.48 2163 33.80 ## 22 2.5 35 0.55 2198 34.34 ## 23 2.6 22 0.34 2220 34.69 ## 24 2.7 28 0.44 2248 35.12 ## 25 2.8 27 0.42 2275 35.55 ## 26 2.9 27 0.42 2302 35.97 ## 27 3 23 0.36 2325 36.33 ## 28 3.1 25 0.39 2350 36.72 ## 29 3.2 29 0.45 2379 37.17 ## 30 3.3 28 0.44 2407 37.61 ## 31 3.4 32 0.50 2439 38.11 ## 32 3.5 20 0.31 2459 38.42 ## 33 3.6 29 0.45 2488 38.88 ## 34 3.7 38 0.59 2526 39.47 ## 35 3.8 24 0.38 2550 39.84 ## 36 3.9 29 0.45 2579 40.30 ## 37 4 29 0.45 2608 40.75 ## 38 4.1 18 0.28 2626 41.03 ## 39 4.2 27 0.42 2653 41.45 ## 40 4.3 22 0.34 2675 41.80 ## 41 4.4 33 0.52 2708 42.31 ## 42 4.5 24 0.38 2732 42.69 ## 43 4.6 22 0.34 2754 43.03 ## 44 4.7 34 0.53 2788 43.56 ## 45 4.8 26 0.41 2814 43.97 ## 46 4.9 28 0.44 2842 44.41 ## 47 5 19 0.30 2861 44.70 ## 48 5.1 28 0.44 2889 45.14 ## 49 5.2 27 0.42 2916 45.56 ## 50 5.3 22 0.34 2938 45.91 ## 51 5.4 30 0.47 2968 46.38 ## 52 5.5 29 0.45 2997 46.83 ## 53 5.6 32 0.50 3029 47.33 ## 54 5.7 43 0.67 3072 48.00 ## 55 5.8 21 0.33 3093 48.33 ## 56 5.9 25 0.39 3118 48.72 ## 57 6 20 0.31 3138 49.03 ## 58 6.1 27 0.42 3165 49.45 ## 59 6.2 32 0.50 3197 49.95 ## 60 6.3 28 0.44 3225 50.39 ## 61 6.4 36 0.56 3261 50.95 ## 62 6.5 38 0.59 3299 51.55 ## 63 6.6 35 0.55 3334 52.09 ## 64 6.7 31 0.48 3365 52.58 ## 65 6.8 34 0.53 3399 53.11 ## 66 6.9 23 0.36 3422 53.47 ## 67 7 31 0.48 3453 53.95 ## 68 7.1 27 0.42 3480 54.38 ## 69 7.2 18 0.28 3498 54.66 ## 70 7.3 22 0.34 3520 55.00 ## 71 7.4 21 0.33 3541 55.33 ## 72 7.5 29 0.45 3570 55.78 ## 73 7.6 27 0.42 3597 56.20 ## 74 7.7 35 0.55 3632 56.75 ## 75 7.8 31 0.48 3663 57.23 ## 76 7.9 27 0.42 3690 57.66 ## 77 8 27 0.42 3717 58.08 ## 78 8.1 31 0.48 3748 58.56 ## 79 8.2 24 0.38 3772 58.94 ## 80 8.3 29 0.45 3801 59.39 ## 81 8.4 31 0.48 3832 59.88 ## 82 8.5 31 0.48 3863 60.36 ## 83 8.6 28 0.44 3891 60.80 ## 84 8.7 24 0.38 3915 61.17 ## 85 8.8 34 0.53 3949 61.70 ## 86 8.9 25 0.39 3974 62.09 ## 87 9 20 0.31 3994 62.41 ## 88 9.1 25 0.39 4019 62.80 ## 89 9.2 25 0.39 4044 63.19 ## 90 9.3 27 0.42 4071 63.61 ## 91 9.4 30 0.47 4101 64.08 ## 92 9.5 28 0.44 4129 64.52 ## 93 9.6 31 0.48 4160 65.00 ## 94 9.7 29 0.45 4189 65.45 ## 95 9.8 31 0.48 4220 65.94 ## 96 9.9 18 0.28 4238 66.22 ## 97 10 138 2.16 4376 68.38 ## 98 11 248 3.88 4624 72.25 ## 99 12 244 3.81 4868 76.06 ## 100 13 212 3.31 5080 79.38 ## 101 14 212 3.31 5292 82.69 ## 102 15 170 2.66 5462 85.34 ## 103 16 145 2.27 5607 87.61 ## 104 17 158 2.47 5765 90.08 ## 105 18 106 1.66 5871 91.73 ## 106 19 98 1.53 5969 93.27 ## 107 20 95 1.48 6064 94.75 ## 108 21 81 1.27 6145 96.02 ## 109 22 56 0.88 6201 96.89 ## 110 23 39 0.61 6240 97.50 ## 111 24 42 0.66 6282 98.16 ## 112 25 25 0.39 6307 98.55 ## 113 26 16 0.25 6323 98.80 ## 114 27 19 0.30 6342 99.09 ## 115 28 15 0.23 6357 99.33 ## 116 29 8 0.12 6365 99.45 ## 117 30 16 0.25 6381 99.70 ## 118 999.5 15 0.23 6396 99.94 ## 119 999.9 4 0.06 6400 100.00 Cycle indicator = 3 # Render an output that approximates SAS&#39;s PROC FREQ arsenal::freqlist( object = table( x = c23 %&gt;% filter(CycleIndicator == 3) %&gt;% select(LAB_BCD) ) ) %&gt;% summary(.) %&gt;% as.data.frame %&gt;% rename( LAB_BCD = 1, Frequency = 2, `Cumulative frequency` = 3, `Cumulative percent` = 5 ) %&gt;% relocate(Percent, .after = Frequency) ## LAB_BCD Frequency Percent Cumulative frequency Cumulative percent ## 1 0.71 8 0.14 8 0.14 ## 2 0.72 14 0.24 22 0.38 ## 3 0.73 14 0.24 36 0.62 ## 4 0.74 8 0.14 44 0.76 ## 5 0.75 19 0.33 63 1.09 ## 6 0.76 17 0.29 80 1.38 ## 7 0.77 11 0.19 91 1.57 ## 8 0.78 16 0.28 107 1.84 ## 9 0.79 16 0.28 123 2.12 ## 10 0.8 8 0.14 131 2.26 ## 11 0.81 9 0.16 140 2.41 ## 12 0.82 8 0.14 148 2.55 ## 13 0.83 14 0.24 162 2.79 ## 14 0.84 11 0.19 173 2.98 ## 15 0.85 12 0.21 185 3.19 ## 16 0.86 8 0.14 193 3.33 ## 17 0.87 17 0.29 210 3.62 ## 18 0.88 7 0.12 217 3.74 ## 19 0.89 15 0.26 232 4.00 ## 20 0.9 13 0.22 245 4.22 ## 21 0.91 18 0.31 263 4.53 ## 22 0.92 16 0.28 279 4.81 ## 23 0.93 11 0.19 290 5.00 ## 24 0.94 14 0.24 304 5.24 ## 25 0.95 11 0.19 315 5.43 ## 26 0.96 11 0.19 326 5.62 ## 27 0.97 14 0.24 340 5.86 ## 28 0.98 16 0.28 356 6.14 ## 29 0.99 16 0.28 372 6.41 ## 30 1 81 1.40 453 7.81 ## 31 1.1 142 2.45 595 10.26 ## 32 1.2 161 2.78 756 13.03 ## 33 1.3 54 0.93 810 13.97 ## 34 1.4 8 0.14 818 14.10 ## 35 1.5 14 0.24 832 14.34 ## 36 1.6 12 0.21 844 14.55 ## 37 1.7 19 0.33 863 14.88 ## 38 1.8 11 0.19 874 15.07 ## 39 1.9 17 0.29 891 15.36 ## 40 2 11 0.19 902 15.55 ## 41 2.1 8 0.14 910 15.69 ## 42 2.2 14 0.24 924 15.93 ## 43 2.3 12 0.21 936 16.14 ## 44 2.4 13 0.22 949 16.36 ## 45 2.5 12 0.21 961 16.57 ## 46 2.6 12 0.21 973 16.78 ## 47 2.7 17 0.29 990 17.07 ## 48 2.8 20 0.34 1010 17.41 ## 49 2.9 18 0.31 1028 17.72 ## 50 3 16 0.28 1044 18.00 ## 51 3.1 17 0.29 1061 18.29 ## 52 3.2 9 0.16 1070 18.45 ## 53 3.3 15 0.26 1085 18.71 ## 54 3.4 17 0.29 1102 19.00 ## 55 3.5 15 0.26 1117 19.26 ## 56 3.6 14 0.24 1131 19.50 ## 57 3.7 19 0.33 1150 19.83 ## 58 3.8 17 0.29 1167 20.12 ## 59 3.9 17 0.29 1184 20.41 ## 60 4 22 0.38 1206 20.79 ## 61 4.1 13 0.22 1219 21.02 ## 62 4.2 11 0.19 1230 21.21 ## 63 4.3 11 0.19 1241 21.40 ## 64 4.4 20 0.34 1261 21.74 ## 65 4.5 21 0.36 1282 22.10 ## 66 4.6 21 0.36 1303 22.47 ## 67 4.7 18 0.31 1321 22.78 ## 68 4.8 16 0.28 1337 23.05 ## 69 4.9 14 0.24 1351 23.29 ## 70 5 19 0.33 1370 23.62 ## 71 5.1 21 0.36 1391 23.98 ## 72 5.2 26 0.45 1417 24.43 ## 73 5.3 15 0.26 1432 24.69 ## 74 5.4 18 0.31 1450 25.00 ## 75 5.5 21 0.36 1471 25.36 ## 76 5.6 14 0.24 1485 25.60 ## 77 5.7 23 0.40 1508 26.00 ## 78 5.8 21 0.36 1529 26.36 ## 79 5.9 14 0.24 1543 26.60 ## 80 6 23 0.40 1566 27.00 ## 81 6.1 18 0.31 1584 27.31 ## 82 6.2 17 0.29 1601 27.60 ## 83 6.3 18 0.31 1619 27.91 ## 84 6.4 23 0.40 1642 28.31 ## 85 6.5 25 0.43 1667 28.74 ## 86 6.6 21 0.36 1688 29.10 ## 87 6.7 16 0.28 1704 29.38 ## 88 6.8 16 0.28 1720 29.66 ## 89 6.9 20 0.34 1740 30.00 ## 90 7 20 0.34 1760 30.34 ## 91 7.1 23 0.40 1783 30.74 ## 92 7.2 12 0.21 1795 30.95 ## 93 7.3 19 0.33 1814 31.28 ## 94 7.4 27 0.47 1841 31.74 ## 95 7.5 20 0.34 1861 32.09 ## 96 7.6 19 0.33 1880 32.41 ## 97 7.7 21 0.36 1901 32.78 ## 98 7.8 24 0.41 1925 33.19 ## 99 7.9 19 0.33 1944 33.52 ## 100 8 20 0.34 1964 33.86 ## 101 8.1 20 0.34 1984 34.21 ## 102 8.2 15 0.26 1999 34.47 ## 103 8.3 24 0.41 2023 34.88 ## 104 8.4 19 0.33 2042 35.21 ## 105 8.5 17 0.29 2059 35.50 ## 106 8.6 29 0.50 2088 36.00 ## 107 8.7 27 0.47 2115 36.47 ## 108 8.8 21 0.36 2136 36.83 ## 109 8.9 13 0.22 2149 37.05 ## 110 9 13 0.22 2162 37.28 ## 111 9.1 26 0.45 2188 37.72 ## 112 9.2 30 0.52 2218 38.24 ## 113 9.3 20 0.34 2238 38.59 ## 114 9.4 19 0.33 2257 38.91 ## 115 9.5 22 0.38 2279 39.29 ## 116 9.6 18 0.31 2297 39.60 ## 117 9.7 20 0.34 2317 39.95 ## 118 9.8 21 0.36 2338 40.31 ## 119 9.9 26 0.45 2364 40.76 ## 120 10 100 1.72 2464 42.48 ## 121 11 167 2.88 2631 45.36 ## 122 12 165 2.84 2796 48.21 ## 123 13 165 2.84 2961 51.05 ## 124 14 161 2.78 3122 53.83 ## 125 15 147 2.53 3269 56.36 ## 126 16 174 3.00 3443 59.36 ## 127 17 127 2.19 3570 61.55 ## 128 18 149 2.57 3719 64.12 ## 129 19 141 2.43 3860 66.55 ## 130 20 127 2.19 3987 68.74 ## 131 21 108 1.86 4095 70.60 ## 132 22 87 1.50 4182 72.10 ## 133 23 79 1.36 4261 73.47 ## 134 24 116 2.00 4377 75.47 ## 135 25 136 2.34 4513 77.81 ## 136 26 150 2.59 4663 80.40 ## 137 27 124 2.14 4787 82.53 ## 138 28 132 2.28 4919 84.81 ## 139 29 110 1.90 5029 86.71 ## 140 30 93 1.60 5122 88.31 ## 141 31 98 1.69 5220 90.00 ## 142 32 70 1.21 5290 91.21 ## 143 33 63 1.09 5353 92.29 ## 144 34 82 1.41 5435 93.71 ## 145 35 58 1.00 5493 94.71 ## 146 36 44 0.76 5537 95.47 ## 147 37 35 0.60 5572 96.07 ## 148 38 23 0.40 5595 96.47 ## 149 39 7 0.12 5602 96.59 ## 150 40 7 0.12 5609 96.71 ## 151 41 2 0.03 5611 96.74 ## 152 42 2 0.03 5613 96.78 ## 153 43 2 0.03 5615 96.81 ## 154 45 1 0.02 5616 96.83 ## 155 47 1 0.02 5617 96.84 ## 156 48 1 0.02 5618 96.86 ## 157 52 1 0.02 5619 96.88 ## 158 53 1 0.02 5620 96.90 ## 159 999.95 133 2.29 5753 99.19 ## 160 999.99 47 0.81 5800 100.00 Step 8h: change the values of LAB_BCD of 999.9 in cycle 2 and 999.99 in cycle 3 to missing # Changes the values of LAB_BCD of 999.5 in cycle 3 and 999.95 in cycle 3 to LOD/2 # LODs for LAB_BCD: Cycle 2=0.4; Cycle 3=0.71 # Because cycle 3 has the highest LOD, a conservative approach is to consider this as the LOD for the combined C2-C3 dataset. This means that all records with a reserve code ending in &quot;5&quot; will be assigned the value 0.71/2. Further, some cycle 2 records have valid values less than 0.71 (455 records in total, using the synthetic data file) and these also will be changed to 0.71 / 2. # Derive BCADMIUM c23 &lt;- c23 %&gt;% mutate( BCADMIUM = case_when( CycleIndicator == 2 &amp; LAB_BCD == 999.9 ~ NA, CycleIndicator == 2 &amp; (LAB_BCD == 999.5 | LAB_BCD &lt; 0.71) ~ 0.71 / 2, CycleIndicator == 3 &amp; LAB_BCD == 999.99 ~ NA, CycleIndicator == 3 &amp; LAB_BCD == 999.95 ~ 0.71 / 2, TRUE ~ LAB_BCD # Assign LAB_BCD value if no other condition met ) ) Cycle indicator = 2 # Render an output that approximates SAS&#39;s PROC FREQ arsenal::freqlist( object = table( x = c23 %&gt;% filter(CycleIndicator == 2) %&gt;% select(LAB_BCD) ) ) %&gt;% summary(.) %&gt;% as.data.frame %&gt;% rename( LAB_BCD = 1, Frequency = 2, `Cumulative frequency` = 3, `Cumulative percent` = 5 ) %&gt;% relocate(Percent, .after = Frequency) ## LAB_BCD Frequency Percent Cumulative frequency Cumulative percent ## 1 0.4 45 0.70 45 0.70 ## 2 0.5 128 2.00 173 2.70 ## 3 0.6 139 2.17 312 4.88 ## 4 0.7 143 2.23 455 7.11 ## 5 0.8 102 1.59 557 8.70 ## 6 0.9 112 1.75 669 10.45 ## 7 1 126 1.97 795 12.42 ## 8 1.1 104 1.62 899 14.05 ## 9 1.2 106 1.66 1005 15.70 ## 10 1.3 111 1.73 1116 17.44 ## 11 1.4 117 1.83 1233 19.27 ## 12 1.5 127 1.98 1360 21.25 ## 13 1.6 108 1.69 1468 22.94 ## 14 1.7 129 2.02 1597 24.95 ## 15 1.8 104 1.62 1701 26.58 ## 16 1.9 113 1.77 1814 28.34 ## 17 2 104 1.62 1918 29.97 ## 18 2.1 125 1.95 2043 31.92 ## 19 2.2 64 1.00 2107 32.92 ## 20 2.3 25 0.39 2132 33.31 ## 21 2.4 31 0.48 2163 33.80 ## 22 2.5 35 0.55 2198 34.34 ## 23 2.6 22 0.34 2220 34.69 ## 24 2.7 28 0.44 2248 35.12 ## 25 2.8 27 0.42 2275 35.55 ## 26 2.9 27 0.42 2302 35.97 ## 27 3 23 0.36 2325 36.33 ## 28 3.1 25 0.39 2350 36.72 ## 29 3.2 29 0.45 2379 37.17 ## 30 3.3 28 0.44 2407 37.61 ## 31 3.4 32 0.50 2439 38.11 ## 32 3.5 20 0.31 2459 38.42 ## 33 3.6 29 0.45 2488 38.88 ## 34 3.7 38 0.59 2526 39.47 ## 35 3.8 24 0.38 2550 39.84 ## 36 3.9 29 0.45 2579 40.30 ## 37 4 29 0.45 2608 40.75 ## 38 4.1 18 0.28 2626 41.03 ## 39 4.2 27 0.42 2653 41.45 ## 40 4.3 22 0.34 2675 41.80 ## 41 4.4 33 0.52 2708 42.31 ## 42 4.5 24 0.38 2732 42.69 ## 43 4.6 22 0.34 2754 43.03 ## 44 4.7 34 0.53 2788 43.56 ## 45 4.8 26 0.41 2814 43.97 ## 46 4.9 28 0.44 2842 44.41 ## 47 5 19 0.30 2861 44.70 ## 48 5.1 28 0.44 2889 45.14 ## 49 5.2 27 0.42 2916 45.56 ## 50 5.3 22 0.34 2938 45.91 ## 51 5.4 30 0.47 2968 46.38 ## 52 5.5 29 0.45 2997 46.83 ## 53 5.6 32 0.50 3029 47.33 ## 54 5.7 43 0.67 3072 48.00 ## 55 5.8 21 0.33 3093 48.33 ## 56 5.9 25 0.39 3118 48.72 ## 57 6 20 0.31 3138 49.03 ## 58 6.1 27 0.42 3165 49.45 ## 59 6.2 32 0.50 3197 49.95 ## 60 6.3 28 0.44 3225 50.39 ## 61 6.4 36 0.56 3261 50.95 ## 62 6.5 38 0.59 3299 51.55 ## 63 6.6 35 0.55 3334 52.09 ## 64 6.7 31 0.48 3365 52.58 ## 65 6.8 34 0.53 3399 53.11 ## 66 6.9 23 0.36 3422 53.47 ## 67 7 31 0.48 3453 53.95 ## 68 7.1 27 0.42 3480 54.38 ## 69 7.2 18 0.28 3498 54.66 ## 70 7.3 22 0.34 3520 55.00 ## 71 7.4 21 0.33 3541 55.33 ## 72 7.5 29 0.45 3570 55.78 ## 73 7.6 27 0.42 3597 56.20 ## 74 7.7 35 0.55 3632 56.75 ## 75 7.8 31 0.48 3663 57.23 ## 76 7.9 27 0.42 3690 57.66 ## 77 8 27 0.42 3717 58.08 ## 78 8.1 31 0.48 3748 58.56 ## 79 8.2 24 0.38 3772 58.94 ## 80 8.3 29 0.45 3801 59.39 ## 81 8.4 31 0.48 3832 59.88 ## 82 8.5 31 0.48 3863 60.36 ## 83 8.6 28 0.44 3891 60.80 ## 84 8.7 24 0.38 3915 61.17 ## 85 8.8 34 0.53 3949 61.70 ## 86 8.9 25 0.39 3974 62.09 ## 87 9 20 0.31 3994 62.41 ## 88 9.1 25 0.39 4019 62.80 ## 89 9.2 25 0.39 4044 63.19 ## 90 9.3 27 0.42 4071 63.61 ## 91 9.4 30 0.47 4101 64.08 ## 92 9.5 28 0.44 4129 64.52 ## 93 9.6 31 0.48 4160 65.00 ## 94 9.7 29 0.45 4189 65.45 ## 95 9.8 31 0.48 4220 65.94 ## 96 9.9 18 0.28 4238 66.22 ## 97 10 138 2.16 4376 68.38 ## 98 11 248 3.88 4624 72.25 ## 99 12 244 3.81 4868 76.06 ## 100 13 212 3.31 5080 79.38 ## 101 14 212 3.31 5292 82.69 ## 102 15 170 2.66 5462 85.34 ## 103 16 145 2.27 5607 87.61 ## 104 17 158 2.47 5765 90.08 ## 105 18 106 1.66 5871 91.73 ## 106 19 98 1.53 5969 93.27 ## 107 20 95 1.48 6064 94.75 ## 108 21 81 1.27 6145 96.02 ## 109 22 56 0.88 6201 96.89 ## 110 23 39 0.61 6240 97.50 ## 111 24 42 0.66 6282 98.16 ## 112 25 25 0.39 6307 98.55 ## 113 26 16 0.25 6323 98.80 ## 114 27 19 0.30 6342 99.09 ## 115 28 15 0.23 6357 99.33 ## 116 29 8 0.12 6365 99.45 ## 117 30 16 0.25 6381 99.70 ## 118 999.5 15 0.23 6396 99.94 ## 119 999.9 4 0.06 6400 100.00 Cycle indicator = 3 # Render an output that approximates SAS&#39;s PROC FREQ arsenal::freqlist( object = table( x = c23 %&gt;% filter(CycleIndicator == 3) %&gt;% select(LAB_BCD) ) ) %&gt;% summary(.) %&gt;% as.data.frame %&gt;% rename( LAB_BCD = 1, Frequency = 2, `Cumulative frequency` = 3, `Cumulative percent` = 5 ) %&gt;% relocate(Percent, .after = Frequency) ## LAB_BCD Frequency Percent Cumulative frequency Cumulative percent ## 1 0.71 8 0.14 8 0.14 ## 2 0.72 14 0.24 22 0.38 ## 3 0.73 14 0.24 36 0.62 ## 4 0.74 8 0.14 44 0.76 ## 5 0.75 19 0.33 63 1.09 ## 6 0.76 17 0.29 80 1.38 ## 7 0.77 11 0.19 91 1.57 ## 8 0.78 16 0.28 107 1.84 ## 9 0.79 16 0.28 123 2.12 ## 10 0.8 8 0.14 131 2.26 ## 11 0.81 9 0.16 140 2.41 ## 12 0.82 8 0.14 148 2.55 ## 13 0.83 14 0.24 162 2.79 ## 14 0.84 11 0.19 173 2.98 ## 15 0.85 12 0.21 185 3.19 ## 16 0.86 8 0.14 193 3.33 ## 17 0.87 17 0.29 210 3.62 ## 18 0.88 7 0.12 217 3.74 ## 19 0.89 15 0.26 232 4.00 ## 20 0.9 13 0.22 245 4.22 ## 21 0.91 18 0.31 263 4.53 ## 22 0.92 16 0.28 279 4.81 ## 23 0.93 11 0.19 290 5.00 ## 24 0.94 14 0.24 304 5.24 ## 25 0.95 11 0.19 315 5.43 ## 26 0.96 11 0.19 326 5.62 ## 27 0.97 14 0.24 340 5.86 ## 28 0.98 16 0.28 356 6.14 ## 29 0.99 16 0.28 372 6.41 ## 30 1 81 1.40 453 7.81 ## 31 1.1 142 2.45 595 10.26 ## 32 1.2 161 2.78 756 13.03 ## 33 1.3 54 0.93 810 13.97 ## 34 1.4 8 0.14 818 14.10 ## 35 1.5 14 0.24 832 14.34 ## 36 1.6 12 0.21 844 14.55 ## 37 1.7 19 0.33 863 14.88 ## 38 1.8 11 0.19 874 15.07 ## 39 1.9 17 0.29 891 15.36 ## 40 2 11 0.19 902 15.55 ## 41 2.1 8 0.14 910 15.69 ## 42 2.2 14 0.24 924 15.93 ## 43 2.3 12 0.21 936 16.14 ## 44 2.4 13 0.22 949 16.36 ## 45 2.5 12 0.21 961 16.57 ## 46 2.6 12 0.21 973 16.78 ## 47 2.7 17 0.29 990 17.07 ## 48 2.8 20 0.34 1010 17.41 ## 49 2.9 18 0.31 1028 17.72 ## 50 3 16 0.28 1044 18.00 ## 51 3.1 17 0.29 1061 18.29 ## 52 3.2 9 0.16 1070 18.45 ## 53 3.3 15 0.26 1085 18.71 ## 54 3.4 17 0.29 1102 19.00 ## 55 3.5 15 0.26 1117 19.26 ## 56 3.6 14 0.24 1131 19.50 ## 57 3.7 19 0.33 1150 19.83 ## 58 3.8 17 0.29 1167 20.12 ## 59 3.9 17 0.29 1184 20.41 ## 60 4 22 0.38 1206 20.79 ## 61 4.1 13 0.22 1219 21.02 ## 62 4.2 11 0.19 1230 21.21 ## 63 4.3 11 0.19 1241 21.40 ## 64 4.4 20 0.34 1261 21.74 ## 65 4.5 21 0.36 1282 22.10 ## 66 4.6 21 0.36 1303 22.47 ## 67 4.7 18 0.31 1321 22.78 ## 68 4.8 16 0.28 1337 23.05 ## 69 4.9 14 0.24 1351 23.29 ## 70 5 19 0.33 1370 23.62 ## 71 5.1 21 0.36 1391 23.98 ## 72 5.2 26 0.45 1417 24.43 ## 73 5.3 15 0.26 1432 24.69 ## 74 5.4 18 0.31 1450 25.00 ## 75 5.5 21 0.36 1471 25.36 ## 76 5.6 14 0.24 1485 25.60 ## 77 5.7 23 0.40 1508 26.00 ## 78 5.8 21 0.36 1529 26.36 ## 79 5.9 14 0.24 1543 26.60 ## 80 6 23 0.40 1566 27.00 ## 81 6.1 18 0.31 1584 27.31 ## 82 6.2 17 0.29 1601 27.60 ## 83 6.3 18 0.31 1619 27.91 ## 84 6.4 23 0.40 1642 28.31 ## 85 6.5 25 0.43 1667 28.74 ## 86 6.6 21 0.36 1688 29.10 ## 87 6.7 16 0.28 1704 29.38 ## 88 6.8 16 0.28 1720 29.66 ## 89 6.9 20 0.34 1740 30.00 ## 90 7 20 0.34 1760 30.34 ## 91 7.1 23 0.40 1783 30.74 ## 92 7.2 12 0.21 1795 30.95 ## 93 7.3 19 0.33 1814 31.28 ## 94 7.4 27 0.47 1841 31.74 ## 95 7.5 20 0.34 1861 32.09 ## 96 7.6 19 0.33 1880 32.41 ## 97 7.7 21 0.36 1901 32.78 ## 98 7.8 24 0.41 1925 33.19 ## 99 7.9 19 0.33 1944 33.52 ## 100 8 20 0.34 1964 33.86 ## 101 8.1 20 0.34 1984 34.21 ## 102 8.2 15 0.26 1999 34.47 ## 103 8.3 24 0.41 2023 34.88 ## 104 8.4 19 0.33 2042 35.21 ## 105 8.5 17 0.29 2059 35.50 ## 106 8.6 29 0.50 2088 36.00 ## 107 8.7 27 0.47 2115 36.47 ## 108 8.8 21 0.36 2136 36.83 ## 109 8.9 13 0.22 2149 37.05 ## 110 9 13 0.22 2162 37.28 ## 111 9.1 26 0.45 2188 37.72 ## 112 9.2 30 0.52 2218 38.24 ## 113 9.3 20 0.34 2238 38.59 ## 114 9.4 19 0.33 2257 38.91 ## 115 9.5 22 0.38 2279 39.29 ## 116 9.6 18 0.31 2297 39.60 ## 117 9.7 20 0.34 2317 39.95 ## 118 9.8 21 0.36 2338 40.31 ## 119 9.9 26 0.45 2364 40.76 ## 120 10 100 1.72 2464 42.48 ## 121 11 167 2.88 2631 45.36 ## 122 12 165 2.84 2796 48.21 ## 123 13 165 2.84 2961 51.05 ## 124 14 161 2.78 3122 53.83 ## 125 15 147 2.53 3269 56.36 ## 126 16 174 3.00 3443 59.36 ## 127 17 127 2.19 3570 61.55 ## 128 18 149 2.57 3719 64.12 ## 129 19 141 2.43 3860 66.55 ## 130 20 127 2.19 3987 68.74 ## 131 21 108 1.86 4095 70.60 ## 132 22 87 1.50 4182 72.10 ## 133 23 79 1.36 4261 73.47 ## 134 24 116 2.00 4377 75.47 ## 135 25 136 2.34 4513 77.81 ## 136 26 150 2.59 4663 80.40 ## 137 27 124 2.14 4787 82.53 ## 138 28 132 2.28 4919 84.81 ## 139 29 110 1.90 5029 86.71 ## 140 30 93 1.60 5122 88.31 ## 141 31 98 1.69 5220 90.00 ## 142 32 70 1.21 5290 91.21 ## 143 33 63 1.09 5353 92.29 ## 144 34 82 1.41 5435 93.71 ## 145 35 58 1.00 5493 94.71 ## 146 36 44 0.76 5537 95.47 ## 147 37 35 0.60 5572 96.07 ## 148 38 23 0.40 5595 96.47 ## 149 39 7 0.12 5602 96.59 ## 150 40 7 0.12 5609 96.71 ## 151 41 2 0.03 5611 96.74 ## 152 42 2 0.03 5613 96.78 ## 153 43 2 0.03 5615 96.81 ## 154 45 1 0.02 5616 96.83 ## 155 47 1 0.02 5617 96.84 ## 156 48 1 0.02 5618 96.86 ## 157 52 1 0.02 5619 96.88 ## 158 53 1 0.02 5620 96.90 ## 159 999.95 133 2.29 5753 99.19 ## 160 999.99 47 0.81 5800 100.00 BCADMIUM Cycle indicator = 2 # Render an output that approximates SAS&#39;s PROC FREQ arsenal::freqlist( object = table( x = c23 %&gt;% filter(CycleIndicator == 2) %&gt;% select(BCADMIUM) ) ) %&gt;% summary(.) %&gt;% as.data.frame %&gt;% rename( BCADMIUM = 1, Frequency = 2, `Cumulative frequency` = 3, `Cumulative percent` = 5 ) %&gt;% relocate(Percent, .after = Frequency) ## BCADMIUM Frequency Percent Cumulative frequency Cumulative percent ## 1 0.355 470 7.35 470 7.35 ## 2 0.8 102 1.59 572 8.94 ## 3 0.9 112 1.75 684 10.69 ## 4 1 126 1.97 810 12.66 ## 5 1.1 104 1.63 914 14.29 ## 6 1.2 106 1.66 1020 15.95 ## 7 1.3 111 1.74 1131 17.68 ## 8 1.4 117 1.83 1248 19.51 ## 9 1.5 127 1.99 1375 21.50 ## 10 1.6 108 1.69 1483 23.19 ## 11 1.7 129 2.02 1612 25.20 ## 12 1.8 104 1.63 1716 26.83 ## 13 1.9 113 1.77 1829 28.60 ## 14 2 104 1.63 1933 30.22 ## 15 2.1 125 1.95 2058 32.18 ## 16 2.2 64 1.00 2122 33.18 ## 17 2.3 25 0.39 2147 33.57 ## 18 2.4 31 0.48 2178 34.05 ## 19 2.5 35 0.55 2213 34.60 ## 20 2.6 22 0.34 2235 34.94 ## 21 2.7 28 0.44 2263 35.38 ## 22 2.8 27 0.42 2290 35.80 ## 23 2.9 27 0.42 2317 36.23 ## 24 3 23 0.36 2340 36.59 ## 25 3.1 25 0.39 2365 36.98 ## 26 3.2 29 0.45 2394 37.43 ## 27 3.3 28 0.44 2422 37.87 ## 28 3.4 32 0.50 2454 38.37 ## 29 3.5 20 0.31 2474 38.68 ## 30 3.6 29 0.45 2503 39.13 ## 31 3.7 38 0.59 2541 39.73 ## 32 3.8 24 0.38 2565 40.10 ## 33 3.9 29 0.45 2594 40.56 ## 34 4 29 0.45 2623 41.01 ## 35 4.1 18 0.28 2641 41.29 ## 36 4.2 27 0.42 2668 41.71 ## 37 4.3 22 0.34 2690 42.06 ## 38 4.4 33 0.52 2723 42.57 ## 39 4.5 24 0.38 2747 42.95 ## 40 4.6 22 0.34 2769 43.29 ## 41 4.7 34 0.53 2803 43.82 ## 42 4.8 26 0.41 2829 44.23 ## 43 4.9 28 0.44 2857 44.67 ## 44 5 19 0.30 2876 44.97 ## 45 5.1 28 0.44 2904 45.40 ## 46 5.2 27 0.42 2931 45.83 ## 47 5.3 22 0.34 2953 46.17 ## 48 5.4 30 0.47 2983 46.64 ## 49 5.5 29 0.45 3012 47.09 ## 50 5.6 32 0.50 3044 47.59 ## 51 5.7 43 0.67 3087 48.26 ## 52 5.8 21 0.33 3108 48.59 ## 53 5.9 25 0.39 3133 48.98 ## 54 6 20 0.31 3153 49.30 ## 55 6.1 27 0.42 3180 49.72 ## 56 6.2 32 0.50 3212 50.22 ## 57 6.3 28 0.44 3240 50.66 ## 58 6.4 36 0.56 3276 51.22 ## 59 6.5 38 0.59 3314 51.81 ## 60 6.6 35 0.55 3349 52.36 ## 61 6.7 31 0.48 3380 52.85 ## 62 6.8 34 0.53 3414 53.38 ## 63 6.9 23 0.36 3437 53.74 ## 64 7 31 0.48 3468 54.22 ## 65 7.1 27 0.42 3495 54.64 ## 66 7.2 18 0.28 3513 54.92 ## 67 7.3 22 0.34 3535 55.27 ## 68 7.4 21 0.33 3556 55.60 ## 69 7.5 29 0.45 3585 56.05 ## 70 7.6 27 0.42 3612 56.47 ## 71 7.7 35 0.55 3647 57.02 ## 72 7.8 31 0.48 3678 57.50 ## 73 7.9 27 0.42 3705 57.93 ## 74 8 27 0.42 3732 58.35 ## 75 8.1 31 0.48 3763 58.83 ## 76 8.2 24 0.38 3787 59.21 ## 77 8.3 29 0.45 3816 59.66 ## 78 8.4 31 0.48 3847 60.15 ## 79 8.5 31 0.48 3878 60.63 ## 80 8.6 28 0.44 3906 61.07 ## 81 8.7 24 0.38 3930 61.44 ## 82 8.8 34 0.53 3964 61.98 ## 83 8.9 25 0.39 3989 62.37 ## 84 9 20 0.31 4009 62.68 ## 85 9.1 25 0.39 4034 63.07 ## 86 9.2 25 0.39 4059 63.46 ## 87 9.3 27 0.42 4086 63.88 ## 88 9.4 30 0.47 4116 64.35 ## 89 9.5 28 0.44 4144 64.79 ## 90 9.6 31 0.48 4175 65.28 ## 91 9.7 29 0.45 4204 65.73 ## 92 9.8 31 0.48 4235 66.21 ## 93 9.9 18 0.28 4253 66.49 ## 94 10 138 2.16 4391 68.65 ## 95 11 248 3.88 4639 72.53 ## 96 12 244 3.81 4883 76.34 ## 97 13 212 3.31 5095 79.66 ## 98 14 212 3.31 5307 82.97 ## 99 15 170 2.66 5477 85.63 ## 100 16 145 2.27 5622 87.90 ## 101 17 158 2.47 5780 90.37 ## 102 18 106 1.66 5886 92.03 ## 103 19 98 1.53 5984 93.56 ## 104 20 95 1.49 6079 95.04 ## 105 21 81 1.27 6160 96.31 ## 106 22 56 0.88 6216 97.19 ## 107 23 39 0.61 6255 97.80 ## 108 24 42 0.66 6297 98.45 ## 109 25 25 0.39 6322 98.84 ## 110 26 16 0.25 6338 99.09 ## 111 27 19 0.30 6357 99.39 ## 112 28 15 0.23 6372 99.62 ## 113 29 8 0.13 6380 99.75 ## 114 30 16 0.25 6396 100.00 Cycle indicator = 3 # Render an output that approximates SAS&#39;s PROC FREQ arsenal::freqlist( object = table( x = c23 %&gt;% filter(CycleIndicator == 3) %&gt;% select(BCADMIUM) ) ) %&gt;% summary(.) %&gt;% as.data.frame %&gt;% rename( BCADMIUM = 1, Frequency = 2, `Cumulative frequency` = 3, `Cumulative percent` = 5 ) %&gt;% relocate(Percent, .after = Frequency) ## BCADMIUM Frequency Percent Cumulative frequency Cumulative percent ## 1 0.355 133 2.31 133 2.31 ## 2 0.71 8 0.14 141 2.45 ## 3 0.72 14 0.24 155 2.69 ## 4 0.73 14 0.24 169 2.94 ## 5 0.74 8 0.14 177 3.08 ## 6 0.75 19 0.33 196 3.41 ## 7 0.76 17 0.30 213 3.70 ## 8 0.77 11 0.19 224 3.89 ## 9 0.78 16 0.28 240 4.17 ## 10 0.79 16 0.28 256 4.45 ## 11 0.8 8 0.14 264 4.59 ## 12 0.81 9 0.16 273 4.75 ## 13 0.82 8 0.14 281 4.88 ## 14 0.83 14 0.24 295 5.13 ## 15 0.84 11 0.19 306 5.32 ## 16 0.85 12 0.21 318 5.53 ## 17 0.86 8 0.14 326 5.67 ## 18 0.87 17 0.30 343 5.96 ## 19 0.88 7 0.12 350 6.08 ## 20 0.89 15 0.26 365 6.34 ## 21 0.9 13 0.23 378 6.57 ## 22 0.91 18 0.31 396 6.88 ## 23 0.92 16 0.28 412 7.16 ## 24 0.93 11 0.19 423 7.35 ## 25 0.94 14 0.24 437 7.60 ## 26 0.95 11 0.19 448 7.79 ## 27 0.96 11 0.19 459 7.98 ## 28 0.97 14 0.24 473 8.22 ## 29 0.98 16 0.28 489 8.50 ## 30 0.99 16 0.28 505 8.78 ## 31 1 81 1.41 586 10.19 ## 32 1.1 142 2.47 728 12.65 ## 33 1.2 161 2.80 889 15.45 ## 34 1.3 54 0.94 943 16.39 ## 35 1.4 8 0.14 951 16.53 ## 36 1.5 14 0.24 965 16.77 ## 37 1.6 12 0.21 977 16.98 ## 38 1.7 19 0.33 996 17.31 ## 39 1.8 11 0.19 1007 17.50 ## 40 1.9 17 0.30 1024 17.80 ## 41 2 11 0.19 1035 17.99 ## 42 2.1 8 0.14 1043 18.13 ## 43 2.2 14 0.24 1057 18.37 ## 44 2.3 12 0.21 1069 18.58 ## 45 2.4 13 0.23 1082 18.81 ## 46 2.5 12 0.21 1094 19.02 ## 47 2.6 12 0.21 1106 19.22 ## 48 2.7 17 0.30 1123 19.52 ## 49 2.8 20 0.35 1143 19.87 ## 50 2.9 18 0.31 1161 20.18 ## 51 3 16 0.28 1177 20.46 ## 52 3.1 17 0.30 1194 20.75 ## 53 3.2 9 0.16 1203 20.91 ## 54 3.3 15 0.26 1218 21.17 ## 55 3.4 17 0.30 1235 21.47 ## 56 3.5 15 0.26 1250 21.73 ## 57 3.6 14 0.24 1264 21.97 ## 58 3.7 19 0.33 1283 22.30 ## 59 3.8 17 0.30 1300 22.60 ## 60 3.9 17 0.30 1317 22.89 ## 61 4 22 0.38 1339 23.27 ## 62 4.1 13 0.23 1352 23.50 ## 63 4.2 11 0.19 1363 23.69 ## 64 4.3 11 0.19 1374 23.88 ## 65 4.4 20 0.35 1394 24.23 ## 66 4.5 21 0.37 1415 24.60 ## 67 4.6 21 0.37 1436 24.96 ## 68 4.7 18 0.31 1454 25.27 ## 69 4.8 16 0.28 1470 25.55 ## 70 4.9 14 0.24 1484 25.80 ## 71 5 19 0.33 1503 26.13 ## 72 5.1 21 0.37 1524 26.49 ## 73 5.2 26 0.45 1550 26.94 ## 74 5.3 15 0.26 1565 27.20 ## 75 5.4 18 0.31 1583 27.52 ## 76 5.5 21 0.37 1604 27.88 ## 77 5.6 14 0.24 1618 28.12 ## 78 5.7 23 0.40 1641 28.52 ## 79 5.8 21 0.37 1662 28.89 ## 80 5.9 14 0.24 1676 29.13 ## 81 6 23 0.40 1699 29.53 ## 82 6.1 18 0.31 1717 29.85 ## 83 6.2 17 0.30 1734 30.14 ## 84 6.3 18 0.31 1752 30.45 ## 85 6.4 23 0.40 1775 30.85 ## 86 6.5 25 0.43 1800 31.29 ## 87 6.6 21 0.37 1821 31.65 ## 88 6.7 16 0.28 1837 31.93 ## 89 6.8 16 0.28 1853 32.21 ## 90 6.9 20 0.35 1873 32.56 ## 91 7 20 0.35 1893 32.90 ## 92 7.1 23 0.40 1916 33.30 ## 93 7.2 12 0.21 1928 33.51 ## 94 7.3 19 0.33 1947 33.84 ## 95 7.4 27 0.47 1974 34.31 ## 96 7.5 20 0.35 1994 34.66 ## 97 7.6 19 0.33 2013 34.99 ## 98 7.7 21 0.37 2034 35.36 ## 99 7.8 24 0.42 2058 35.77 ## 100 7.9 19 0.33 2077 36.10 ## 101 8 20 0.35 2097 36.45 ## 102 8.1 20 0.35 2117 36.80 ## 103 8.2 15 0.26 2132 37.06 ## 104 8.3 24 0.42 2156 37.48 ## 105 8.4 19 0.33 2175 37.81 ## 106 8.5 17 0.30 2192 38.10 ## 107 8.6 29 0.50 2221 38.61 ## 108 8.7 27 0.47 2248 39.08 ## 109 8.8 21 0.37 2269 39.44 ## 110 8.9 13 0.23 2282 39.67 ## 111 9 13 0.23 2295 39.89 ## 112 9.1 26 0.45 2321 40.34 ## 113 9.2 30 0.52 2351 40.87 ## 114 9.3 20 0.35 2371 41.21 ## 115 9.4 19 0.33 2390 41.54 ## 116 9.5 22 0.38 2412 41.93 ## 117 9.6 18 0.31 2430 42.24 ## 118 9.7 20 0.35 2450 42.59 ## 119 9.8 21 0.37 2471 42.95 ## 120 9.9 26 0.45 2497 43.40 ## 121 10 100 1.74 2597 45.14 ## 122 11 167 2.90 2764 48.04 ## 123 12 165 2.87 2929 50.91 ## 124 13 165 2.87 3094 53.78 ## 125 14 161 2.80 3255 56.58 ## 126 15 147 2.56 3402 59.13 ## 127 16 174 3.02 3576 62.16 ## 128 17 127 2.21 3703 64.37 ## 129 18 149 2.59 3852 66.96 ## 130 19 141 2.45 3993 69.41 ## 131 20 127 2.21 4120 71.61 ## 132 21 108 1.88 4228 73.49 ## 133 22 87 1.51 4315 75.00 ## 134 23 79 1.37 4394 76.38 ## 135 24 116 2.02 4510 78.39 ## 136 25 136 2.36 4646 80.76 ## 137 26 150 2.61 4796 83.37 ## 138 27 124 2.16 4920 85.52 ## 139 28 132 2.29 5052 87.82 ## 140 29 110 1.91 5162 89.73 ## 141 30 93 1.62 5255 91.34 ## 142 31 98 1.70 5353 93.05 ## 143 32 70 1.22 5423 94.26 ## 144 33 63 1.10 5486 95.36 ## 145 34 82 1.43 5568 96.78 ## 146 35 58 1.01 5626 97.79 ## 147 36 44 0.76 5670 98.56 ## 148 37 35 0.61 5705 99.17 ## 149 38 23 0.40 5728 99.57 ## 150 39 7 0.12 5735 99.69 ## 151 40 7 0.12 5742 99.81 ## 152 41 2 0.03 5744 99.84 ## 153 42 2 0.03 5746 99.88 ## 154 43 2 0.03 5748 99.91 ## 155 45 1 0.02 5749 99.93 ## 156 47 1 0.02 5750 99.95 ## 157 48 1 0.02 5751 99.97 ## 158 52 1 0.02 5752 99.98 ## 159 53 1 0.02 5753 100.00 Step 8i: derive necessary variables # Derive agegroup c23 &lt;- c23 %&gt;% mutate( agegroup = case_when( CLC_AGE %in% 6:11 ~ 1, CLC_AGE %in% 12:19 ~ 2, CLC_AGE %in% 20:39 ~ 3, CLC_AGE %in% 40:59 ~ 4, CLC_AGE %in% 60:80 ~ 5, # A respondent turned 80 between the household and clinic visit and we want to keep him/her TRUE ~ NA # Assign NA if no other condition met ) ) # Derive male c23 &lt;- c23 %&gt;% mutate( male = case_when( CLC_SEX == 1 ~ 1, CLC_SEX == 2 ~ 0, TRUE ~ NA # Assign NA if no other condition met ) ) # Derive smoker c23 &lt;- c23 %&gt;% mutate( smoker = case_when( SMK_12 %in% 1:2 ~ 1, SMK_12 %in% 3 ~ 0, TRUE ~ NA # Assign NA if no other condition met ) ) Step 8j: assess any significant changes between cycles # Check estimates of categorical variables for significant changes across cycles # Specify survey design survey_design &lt;- c23 %&gt;% as_survey_rep( variables = c( &quot;smoker&quot;, &quot;male&quot;, &quot;agegroup&quot;, &quot;BCADMIUM&quot;, &quot;CycleIndicator&quot; ), weights = WGT_FULL, repweights = starts_with(&quot;bsw&quot;), type = &quot;BRR&quot; ) # Set degrees of freedom (much larger when combining cycles) survey_design$degf &lt;- 24 Data summary # Summarize the survey design summary &lt;- summary(survey_design) # Render number of observations nrow(summary$variables) ## [1] 12200 # Render sum of weights sum(summary$pweights) ## [1] 62310000 Variance estimation # Render method summary$type ## [1] &quot;BRR&quot; # Render number of replicates ncol(summary$repweights) ## [1] 500 Test of association # Perform Chi-squared test of association using F statistic svychisq( formula = ~ interaction(smoker, CycleIndicator), statistic = &quot;F&quot;, design = survey_design, na.rm = TRUE ) ## ## Pearson&#39;s X^2: Rao &amp; Scott adjustment ## ## data: NextMethod() ## F = 2744.4, ndf = 1, ddf = 24, p-value &lt; 2.2e-16 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
